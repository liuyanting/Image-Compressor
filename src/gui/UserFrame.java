/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;
import fileaccess.FileFormat;
import fileaccess.GetDirContents;
import ij.ImagePlus;
import imageprocessing.Resized;
import imageprocessing.SaveImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import loci.formats.FormatException;
import loci.formats.UnknownFormatException;
import loci.plugins.BF;

/**
 *
 * @author andy
 */
public class UserFrame extends javax.swing.JFrame {
    private File InputDir = null;
    private File OutputDir = null;
    private DefaultListModel<String> OutputDirListModel;
    
    private String outputExt;
    
    private Thread compressionThread;
    private boolean running = false;
    
    private double shrink = -1;
    
    private boolean showPreview = true;
    
    /**
     * Creates new form UserPanel
     */
    public UserFrame() {
        initComponents();
        // Center the screen not working.
        // setLocationRelativeTo(null);
        
        outputExt = OutputFormat.getSelectedItem().toString();
        
        ShrinkFactor.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                //warn();
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                if(ShrinkFactor.getText().length() != 0)
                    warn();
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                warn();
                //super.insertUpdate();
            }

            public void warn() {
                boolean flag = false;
                try {
                    double value = Double.parseDouble(ShrinkFactor.getText());
                    if (value < 0 || value > 100){
                        JOptionPane.showMessageDialog(null,
                                                      "Shrink factor should fall between 0 and 100.",
                                                      "Error Massage",
                                                      JOptionPane.ERROR_MESSAGE);
                        flag = true;
                    } else {
                        shrink = value;
                    }
                } catch(NumberFormatException e) {
                    if(!ShrinkFactor.getText().equals("-")) {
                        JOptionPane.showMessageDialog(null, 
                                                      "Not an acceptable input format.",
                                                      "Error Message",
                                                      JOptionPane.ERROR_MESSAGE);
                        flag = true;
                    } 
                }
                
                if(flag) {
                    Runnable resetField = new Runnable() {

                        public void run() {
                            ShrinkFactor.setText("");
                        }
                    };
                    SwingUtilities.invokeLater(resetField);
                }
                System.out.println(Double.toString(shrink));
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        InputDirLabel = new javax.swing.JLabel();
        OutputDirLabel = new javax.swing.JLabel();
        ProgressBar = new javax.swing.JProgressBar();
        ExecuteButton = new javax.swing.JToggleButton();
        SizeReductionInfo = new javax.swing.JLabel();
        OutputFormatLabel = new javax.swing.JLabel();
        OutputFormat = new javax.swing.JComboBox();
        CompressionRatioLabel = new javax.swing.JLabel();
        ShrinkFactor = new javax.swing.JFormattedTextField();
        OutputDirScrollPanel = new javax.swing.JScrollPane();
        OutputDirList = new javax.swing.JList();
        FrameForOutputPreview = new javax.swing.JPanel();
        OutputPreview = new gui.ImagePanel();
        InputDirScrollPanel = new javax.swing.JScrollPane();
        InputDirList = new javax.swing.JList();
        FrameForInputPreview = new javax.swing.JPanel();
        InputPreview = new gui.ImagePanel();
        Seperator3 = new javax.swing.JSeparator();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(30, 30), new java.awt.Dimension(30, 30), new java.awt.Dimension(30, 30));
        MemoryUsage = new javax.swing.JProgressBar();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        SelectInputDir = new javax.swing.JMenuItem();
        SelectOutputDir = new javax.swing.JMenuItem();
        FileSepereator = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        PreviewMenu = new javax.swing.JMenu();
        DisablePreview = new javax.swing.JCheckBoxMenuItem();
        HelpMenu = new javax.swing.JMenu();
        Version = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Compressor");
        setResizable(false);

        InputDirLabel.setText("Input Directory");

        OutputDirLabel.setText("Output Directory");

        ProgressBar.setToolTipText("");
        ProgressBar.setPreferredSize(new java.awt.Dimension(250, 20));
        ProgressBar.setString("");
        ProgressBar.setStringPainted(true);

        ExecuteButton.setText("START");
        ExecuteButton.setToolTipText("");
        ExecuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteButtonActionPerformed(evt);
            }
        });

        SizeReductionInfo.setText("Size: Press START to begin");

        OutputFormatLabel.setText("Output File Format");

        OutputFormat.setModel(new javax.swing.DefaultComboBoxModel(new FileFormat().getAcceptableFileFormat()));
        OutputFormat.setToolTipText("");
        OutputFormat.insertItemAt("default", 0);
        OutputFormat.setSelectedIndex(0);

        outputExt = "default";
        OutputFormat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OutputFormatItemStateChanged(evt);
            }
        });

        CompressionRatioLabel.setText("Shrink Factor (%)");

        ShrinkFactor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.0"))));
        ShrinkFactor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ShrinkFactor.setText("0");
        ShrinkFactor.setAutoscrolls(false);

        OutputDirList.setBackground(java.awt.Color.lightGray);
        OutputDirList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        OutputDirList.setSize(new java.awt.Dimension(374, 161));
        OutputDirList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OutputDirListMouseClicked(evt);
            }
        });
        OutputDirScrollPanel.setViewportView(OutputDirList);

        FrameForOutputPreview.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output Preview", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        javax.swing.GroupLayout FrameForOutputPreviewLayout = new javax.swing.GroupLayout(FrameForOutputPreview);
        FrameForOutputPreview.setLayout(FrameForOutputPreviewLayout);
        FrameForOutputPreviewLayout.setHorizontalGroup(
            FrameForOutputPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(OutputPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        FrameForOutputPreviewLayout.setVerticalGroup(
            FrameForOutputPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(OutputPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        InputDirList.setBackground(java.awt.Color.lightGray);
        InputDirList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        InputDirList.setSize(new java.awt.Dimension(374, 161));
        InputDirList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InputDirListMouseClicked(evt);
            }
        });
        InputDirScrollPanel.setViewportView(InputDirList);

        FrameForInputPreview.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input Preview", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        javax.swing.GroupLayout FrameForInputPreviewLayout = new javax.swing.GroupLayout(FrameForInputPreview);
        FrameForInputPreview.setLayout(FrameForInputPreviewLayout);
        FrameForInputPreviewLayout.setHorizontalGroup(
            FrameForInputPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(InputPreview, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        FrameForInputPreviewLayout.setVerticalGroup(
            FrameForInputPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(InputPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        Seperator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        MemoryUsage.setToolTipText("");
        MemoryUsage.setPreferredSize(new java.awt.Dimension(250, 20));
        MemoryUsage.setString("");
        MemoryUsage.setStringPainted(true);

        FileMenu.setText("File");

        SelectInputDir.setText("Select Input Directory");
        SelectInputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectInputDirActionPerformed(evt);
            }
        });
        FileMenu.add(SelectInputDir);

        SelectOutputDir.setText("Select Output Directory");
        SelectOutputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectOutputDirActionPerformed(evt);
            }
        });
        FileMenu.add(SelectOutputDir);
        FileMenu.add(FileSepereator);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        FileMenu.add(Exit);

        MenuBar.add(FileMenu);

        PreviewMenu.setText("Preview");

        DisablePreview.setText("Disable Preview");
        DisablePreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisablePreviewActionPerformed(evt);
            }
        });
        PreviewMenu.add(DisablePreview);

        MenuBar.add(PreviewMenu);

        HelpMenu.setText("Help");

        Version.setText("Version");
        Version.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VersionActionPerformed(evt);
            }
        });
        HelpMenu.add(Version);

        MenuBar.add(HelpMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OutputDirScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FrameForOutputPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(InputDirLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(InputDirScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FrameForInputPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(OutputDirLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(Seperator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CompressionRatioLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ShrinkFactor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(OutputFormatLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OutputFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SizeReductionInfo)
                            .addComponent(ExecuteButton))
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MemoryUsage, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Seperator3, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(InputDirLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InputDirScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(FrameForInputPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(OutputDirLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(CompressionRatioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ShrinkFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(OutputFormatLabel)
                                    .addComponent(OutputFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SizeReductionInfo)
                                .addGap(18, 18, 18)
                                .addComponent(ExecuteButton)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FrameForOutputPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(OutputDirScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(MemoryUsage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Thread memoryMonitorThread = new Thread("Memory Monitor Thread") {
            @Override
            public void run() {
                Runtime runtime = Runtime.getRuntime();

                while(true) {
                    long total_mem = runtime.totalMemory();
                    long used_mem = total_mem - runtime.freeMemory();

                    MemoryUsage.setMaximum((int)(total_mem));
                    MemoryUsage.setValue((int)(used_mem));

                    String used = humanReadableByteCount(used_mem, false);
                    String max = humanReadableByteCount(total_mem, false);

                    MemoryUsage.setString(used + " / " + max);

                    try {
                        Thread.sleep(1000);
                    } catch(InterruptedException ex) {
                    }
                }
            }
        };
        memoryMonitorThread.start();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SelectInputDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectInputDirActionPerformed
        GetDirContents InputDirContent = new GetDirContents("Select Input Directory");
        
        if(InputDirContent.getSelectedDir() != null) {
            InputDirList.setModel(InputDirContent.getListModel());
            InputDir = InputDirContent.getSelectedDir();

            InputDirList.setBackground(java.awt.Color.WHITE);
        }
    }//GEN-LAST:event_SelectInputDirActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void SelectOutputDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectOutputDirActionPerformed
        GetDirContents OutputDirContent = new GetDirContents("Select Output Directory");
        // Notify if folder not empty
        if(OutputDirContent.getSelectedDir() != null) {
            OutputDirListModel = OutputDirContent.getListModel();
            OutputDirList.setModel(OutputDirListModel);
            OutputDir = OutputDirContent.getSelectedDir();

            OutputDirList.setBackground(java.awt.Color.WHITE);
        }
    }//GEN-LAST:event_SelectOutputDirActionPerformed
    
    private String humanReadableByteCount(long bytes, boolean si) {
        int unit = si ? 1000 : 1024;
        if (bytes < unit) return bytes + " B";
        int exp = (int) (Math.log(bytes) / Math.log(unit));
        String pre = (si ? "kMGTPE" : "KMGTPE").charAt(exp-1) + (si ? "" : "i");
        return String.format("%.1f %sB", bytes / Math.pow(unit, exp), pre);
    }
    private void startCompression() {
        
        final ListModel targetModel = InputDirList.getModel();
        final int size = targetModel.getSize();
        
        ProgressBar.setMaximum(size);
        ProgressBar.setString(Integer.toString(0) + " / " + Integer.toString(size));
            
        long size1, size2 = 0;
        ImagePlus image, resized;
        SaveImage saved;
        File original;

        for(int index = 0; index < size;) {
            String path = targetModel.getElementAt(index).toString();
            
            InputDirList.setSelectedIndex(index);
            InputDirList.ensureIndexIsVisible(index);
            
            System.out.println(path);
            
            try {
                image = (BF.openImagePlus(path))[0];
                if(showPreview) {
                    InputPreview.updateImage(image);
                    InputPreview.repaint();
                }
                resized = new Resized(image, shrink).getResult();
                if(showPreview) {
                    OutputPreview.updateImage(resized);
                    OutputPreview.repaint();
                }
                saved = new SaveImage(resized, path, InputDir, OutputDir, outputExt);
                OutputDirListModel.addElement(saved.getNewPath());
                size2 = saved.getFileSize();
            } catch (IOException ex) {
                Logger.getLogger(UserFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnknownFormatException ex) {
                int n;
                n = JOptionPane.showConfirmDialog(this, 
                        "Format of " + path + " have some problems. Continue?",
                        "Confirm",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE);
                if(n == JOptionPane.CANCEL_OPTION) 
                    break;
            } catch (FormatException ex) {
                Logger.getLogger(UserFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
//                        System.out.print(" .. Complete!\n");

            ProgressBar.setValue(++index);
            ProgressBar.setString(Integer.toString(index) + " / " + Integer.toString(size));

            // Update file list
            OutputDirList.setModel(OutputDirListModel);

            original = new File(path); 
            size1 = original.length();
            SizeReductionInfo.setText("Size: from " + humanReadableByteCount(size1, false) + " to " + humanReadableByteCount(size2, false));
        }   
    }
    private void initiateCompression() {
        running = true;
        ExecuteButton.setText("STOP");
        // disable further modifications
        ShrinkFactor.setEnabled(false);
        OutputFormat.setEnabled(false);
        
        DisablePreview.setEnabled(false);
        
        if(InputDir == null) {
            JOptionPane.showMessageDialog(this,
                                          "You haven't select an input directory!",
                                          "Error Message",
                                          JOptionPane.ERROR_MESSAGE);
            stopCompression();
        } else if(InputDirList.getModel().getSize() == 0) {
            JOptionPane.showMessageDialog(this,
                                          "No image to process in the selected directory.",
                                          "Notification",
                                          JOptionPane.INFORMATION_MESSAGE);
            stopCompression();
        } else {
            if(OutputDir == null) {
                JOptionPane.showMessageDialog(this, 
                                              "Output directory not selected!",
                                              "Error Message",
                                              JOptionPane.ERROR_MESSAGE);
                stopCompression();
                return;
            }  
            if(InputDir.equals(OutputDir)) {
                int n = JOptionPane.showConfirmDialog(this, 
                                                      "Output result will overwrite existing files!",
                                                      "Confirm", 
                                                      JOptionPane.OK_CANCEL_OPTION, 
                                                      JOptionPane.QUESTION_MESSAGE);
                if(n == JOptionPane.CANCEL_OPTION) {
                    stopCompression();
                    return;
                }
            }
            System.out.println("Start processing..."); 
            SizeReductionInfo.setText("Size: Waiting...");
            
            try {
                compressionThread = new Thread("Compression Thread") {
                    @Override
                    public void run() {
                        startCompression();    
                        stopCompression();
                    }
                }; 
                compressionThread.start();
            } catch(NoClassDefFoundError ex) {
                JOptionPane.showMessageDialog(this, 
                                              "Oops! Some error occurred in the program, please restart again.",
                                              "Error Message",
                                              JOptionPane.ERROR_MESSAGE);
                if(compressionThread.isAlive())
                    stopCompression();
            }
        }
    }
    
    private void stopCompression() {
        ExecuteButton.setText("START");
        ExecuteButton.setSelected(false);
        ShrinkFactor.setEnabled(true);
        OutputFormat.setEnabled(true);
        
        DisablePreview.setEnabled(true);
        
        ProgressBar.setValue(ProgressBar.getMinimum());
        ProgressBar.setString("");
        
        SizeReductionInfo.setText("Size: Press START to begin");
        
        running = false;
    }
    private void ExecuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteButtonActionPerformed
        if(((JToggleButton)evt.getSource()).isSelected()) 
            initiateCompression();
        else {
            if(running)
                compressionThread.stop();
            stopCompression();
        }
    }//GEN-LAST:event_ExecuteButtonActionPerformed
    
    private void OutputFormatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OutputFormatItemStateChanged
        outputExt = OutputFormat.getSelectedItem().toString();
    }//GEN-LAST:event_OutputFormatItemStateChanged
    
    private void InputDirListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InputDirListMouseClicked
        if(!running && InputDirList.getSelectedIndex() != -1) {
            InputPreview.updateImage(InputDirList.getSelectedValue().toString());
            InputPreview.repaint();
        }
    }//GEN-LAST:event_InputDirListMouseClicked

    private void OutputDirListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OutputDirListMouseClicked
        if(!running && OutputDirList.getSelectedIndex() != -1) {
            OutputPreview.updateImage(OutputDirList.getSelectedValue().toString());
            OutputPreview.repaint();
        }
    }//GEN-LAST:event_OutputDirListMouseClicked

    private void DisablePreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisablePreviewActionPerformed
        showPreview = !DisablePreview.getState();
    }//GEN-LAST:event_DisablePreviewActionPerformed

    private void VersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VersionActionPerformed
        JOptionPane.showMessageDialog(this, 
                                      "Current version is RC2, released on 2014.05.12",
                                      "Version Info",
                                      JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_VersionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Metal look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new UserFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CompressionRatioLabel;
    private javax.swing.JCheckBoxMenuItem DisablePreview;
    private javax.swing.JToggleButton ExecuteButton;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JPopupMenu.Separator FileSepereator;
    private javax.swing.JPanel FrameForInputPreview;
    private javax.swing.JPanel FrameForOutputPreview;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JLabel InputDirLabel;
    private javax.swing.JList InputDirList;
    private javax.swing.JScrollPane InputDirScrollPanel;
    private gui.ImagePanel InputPreview;
    private javax.swing.JProgressBar MemoryUsage;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JLabel OutputDirLabel;
    private javax.swing.JList OutputDirList;
    private javax.swing.JScrollPane OutputDirScrollPanel;
    private javax.swing.JComboBox OutputFormat;
    private javax.swing.JLabel OutputFormatLabel;
    private gui.ImagePanel OutputPreview;
    private javax.swing.JMenu PreviewMenu;
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JMenuItem SelectInputDir;
    private javax.swing.JMenuItem SelectOutputDir;
    private javax.swing.JSeparator Seperator3;
    private javax.swing.JFormattedTextField ShrinkFactor;
    private javax.swing.JLabel SizeReductionInfo;
    private javax.swing.JMenuItem Version;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JMenu jMenu1;
    // End of variables declaration//GEN-END:variables
}
